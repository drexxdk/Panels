/// <reference path="../../references" />

@mixin button-variant($background, $border, $active-background: darken($background, 7.5%)) {
    @include color-yiq($background);
    background-color: $background;
    @include box-shadow($btn-box-shadow);

    &:hover {
        @include color-yiq($background);
        background-color: $active-background;
    }

    &:focus,
    &.focus {
        box-shadow: $btn-box-shadow, 0 0 0 3px lighten($border, 20%);
        z-index: 1;
    }
}

.btn-group {
    @include flex-display;
    @include flex-wrap(wrap);

    > .btn {
        flex-grow: 1;
        @include border-radius(0);

        &:first-of-type {
            @include border-radiuses-ignore-0(.5rem, 0, 0, .5rem);
        }

        &:last-of-type {
            @include border-radiuses-ignore-0(0, .5rem, .5rem, 0);
        }
    }
}

.btn {
    @include flex-display;
    @include align-items(center);
    @include noselect;
    font-size: $font-size-base;
    padding: $padding-y-base $padding-x-base;
    min-height: $line-height-base + ($padding-y-base * 2);
    @include border-radius($border-radius-base);
    text-decoration: none;
    background-color: transparent;
    cursor: pointer;

    &:not(.align-left):not(.align-right) {
        @include justify-content(center);
    }

    &.align-right {
        @include justify-content(flex-end);
    }

    > * {
        cursor: pointer;
    }

    > svg + label,
    > label + svg {
        margin-left: $spacer / 2;
    }

    > svg {
        width: $font-size-base;
        height: $font-size-base;
    }
}


@each $color, $value in $theme-colors {
    .btn-#{$color} {
        @include button-variant($value, $value);
    }
}

.btn-link {
    color: $link-color;
    text-decoration: $link-decoration;

    &:hover {
        color: $link-hover-color;
        text-decoration: $link-hover-decoration;
    }
}
