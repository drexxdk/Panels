/// <reference path="../references" />

@mixin alert-variant($background, $border, $color) {
    color: $color;
    background-color: $background;
    border-color: $border;
}

.alert {
    font-size: $font-size;
    background-color: transparent;
    border-radius: $component-border-radius;
    @include flex-display();
    @include align-items(flex-start);
    overflow: hidden;


    $value: theme-color("light");
    @include alert-variant(theme-soft-background-color($value), theme-soft-border-color($value), theme-soft-color($value));

    & .close:focus {
        $active-background: darken(theme-soft-background-color($value), 7.5%);
        @include color-yiq($active-background);
        background-color: $active-background;
    }

    @each $color, $value in $theme-colors {
        &.theme-#{$color} .close:focus {

            $active-background: darken(theme-soft-background-color($value), 7.5%);
            @include color-yiq($active-background);
            background-color: $active-background;
        }
    }


    > div {
        padding: $padding-y $padding-x;
        min-height: $line-height + ($padding-y * 2);
        flex-grow: 1;
        width: 100%;
    }

    > .close {
        @include flex-center;
        width: $line-height + ($padding-y * 2);
        height: $line-height + ($padding-y * 2);
        background-color: transparent;
        flex-shrink: 0;

        > svg {
            width: $font-size;
            height: $font-size;
            flex-shrink: 0;
            display: block;
        }
    }

    @each $color, $value in $theme-colors {
        &.theme-#{$color} {
            @include alert-variant(theme-soft-background-color($value), theme-soft-border-color($value), theme-soft-color($value));
        }
    }
}
