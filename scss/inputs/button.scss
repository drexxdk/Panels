/// <reference path="../references" />

@mixin button-variant($background, $border) {
    @include color-yiq($background);
    background-color: $background;
    @include box-shadow($box-shadow);

    &:focus,
    &.focus {
        @include box-shadow($box-shadow, 0 0 0 $btn-focus-box-shadow-width $border);
        z-index: $component-focus-z-index;
    }
}

.group {
    @include flex-display;
    @include flex-wrap(wrap);


    &.expand > .btn {
        flex-grow: 1;
    }

    > .btn {
        @include border-radius(0);
    }
}

.btn {
    @include flex-display;
    @include align-items(center);
    @include noselect;
    font-size: $font-size;
    padding: $padding-y $padding-x;
    /*min-height: $line-height + ($padding-y * 2);*/
    @include border-radius($component-border-radius);
    text-decoration: none;
    background-color: transparent;
    cursor: pointer;
    line-height: $component-line-height;
    z-index: $component-z-index;

    &:not(.align-left):not(.align-right) {
        @include justify-content(center);
    }

    &.align-right {
        @include justify-content(flex-end);
    }

    > * {
        cursor: pointer;
    }

    > i + label,
    > svg + label,
    > label + i,
    > label + svg {
        margin-left: $spacer / 2;
    }

    > i,
    > svg {
        margin: #{(($component-line-height * $font-size) - $font-size) / 2} 0;
        width: $font-size;
        height: $font-size;
        flex-shrink: 0;
    }

    $value: theme-color("primary");
    $active-background: darken($value, 7.5%);
    @include button-variant($value, theme-soft-border-color($value));



    @each $color, $value in $theme-colors {
        &.theme-#{$color} {
            @include button-variant($value, theme-soft-border-color($value));
        }
    }
}

.theme-link {
    color: $link-color;
    text-decoration: $link-decoration;
    background-color: transparent !important;

    &:focus,
    &.focus {
        @include box-shadow(none);
    }
}
